# 문자열 포매팅 (formatting)
'''
[문제]
변수 number에 숫자 5를 담고
아래의 출력결과와 같이 출력되도록 하시오.
포매팅 형식은 기본 포매팅, format 함수 포매팅, f 문자열 포매팅
3가지 방식으로 표현하시오.


[출력결과]
I eat 5 apples.  --> 기본 포매팅 형식
I eat 5 apples.  --> format 함수 포매팅 형식
I eat 5 apples.  --> f 문자열 포매팅 형식

[정답]
number = 5
print('I eat %d apples.' % number)
print('I eat {} apples.'.format(number))
print(f'I eat {number} apples.')

'''



'''
[문제]
변수 num1에 숫자 3을 담고, 변수 num2에 숫자 5를 담은 후
아래의 출력결과와 같이 출력하시오.
이번 포매팅 형식은 format 함수 포매팅, f 문자열 포매팅
2가지 방식으로 표현하시오.


[출력결과]
I eat 3 apples. You eat 5 apples.
I eat 3 apples. You eat 5 apples.

[정답]
num1 = 3
num2 = 5
print('I eat {} apples. You eat {} apples.'.format(num1, num2))
print(f'I eat {num1} apples. You eat {num2} apples.')

'''



'''
[문제] 연산자를 이용하여 지폐 교환 프로그램 만들기

수업 때 진행한 동전 교환 프로그램의 코드를 일부 변경해서
지폐 교환 프로그램으로 바꾸어보자.
포매팅 형식은 기본 포매팅, format 함수 포매팅, f 문자열 포매팅 형식 중
아무거나 선택하여 출력해보자.


[출력결과]
교환할 돈 : 777777

50000원짜리-->15개
10000원짜리-->2개
5000원짜리-->1개
1000원짜리-->2개
바꾸지 못한 잔돈-->777개

[정답]
money = 777777

print('교환할 돈 :', money)
print()

a50000 = money // 50000
money = money % 50000

a10000 = money // 10000
money = money % 10000

a5000 = money // 5000
money = money % 5000

a1000 = money // 1000
money = money % 1000

print('50000원짜리-->%d개' % a50000)  # 기본 포매팅
print('10000원짜리-->%d개' % a10000)
print('5000원짜리-->%d개' % a5000)
print('1000원짜리-->%d개' % a1000)
print('바꾸지 못한 잔돈-->%d개' % money)
print()

print('50000원짜리-->{}개'.format(a50000))  # format 함수 포매팅
print('10000원짜리-->{}개'.format(a10000))
print('5000원짜리-->{}개'.format(a5000))
print('1000원짜리-->{}개'.format(a1000))
print('바꾸지 못한 잔돈-->{}개'.format(money))
print()

print(f'50000원짜리-->{a50000}개')  # f 문자열 포매팅
print(f'10000원짜리-->{a10000}개')
print(f'5000원짜리-->{a5000}개')
print(f'1000원짜리-->{a1000}개')
print(f'바꾸지 못한 잔돈-->{money}개')


'''
==============================================================

20200706

# 리스트 요소(값) 추가: append()  -☆중요, insert()

 <형식>
 리스트명.append(요소)
   --> 리스트 맨 뒤에 요소(값)을 추가

 리스트명.insert(위치,요소)
   --> 리스트 중간에 요소(값)을 추가
   
list1 =[1,2,3]

print("list1 -->",list1)

list1.append(4)
print("list1.append(4) 실행 후 -->",list1) #[1, 2, 3, 4]

list1.append(100)
print("list1.append(100) 실행 후 -->",list1) #[1, 2, 3, 4, 100]

list1.insert(0,50) #list1의 0번째 위치에 50을 추가
print("list1.insert(0,50) 실행 후 -->",list1) #[50, 1, 2, 3, 4, 100]
#list1의 0번째 위치를 10으로 바꾸는건 list1[0]=10

list2.append([1,2]) 
print(list2) # [0, 2, 4, [1, 2]]
print(list2[3][0]) #1


# 리스트 요소 제거: del, pop()

 <형식>
 del 리스트명[인덱스번호]
 리스트명.pop(인덱스번호)
 리스트명.pop() --> 인덱스 번호 생략시 맨뒤의 값이 삭제
 
list2=[0,1,2,3,4,5]
print(list2)

del list2[1]
print("del list2[1] 실행 후 -->",list2) # [0, 2, 3, 4, 5]

list2.pop(2)
print("list2.pop(2) 실행 후 -->",list2) # [0, 2, 4, 5]

list2.pop() #맨 끝의 값이 삭제
print("list2.pop() 실행 후 -->",list2) # [0, 2, 4]


list3 =[0,1,2,3,4,5,6]
print("list3 -->",list3)

del list3[3:6] # 슬라이싱은 del만 쓸수 있음
print("del list3[3:6] 실행 후 -->",list3) # [0, 1, 2, 6]

list4 = [0,1,2,3,4,5,6]
print("list4 -->",list4)

del list4[:3]
print("del list4[:3] 실행 후 -->",list4) # [3, 4, 5, 6]

# 리스트의 특정 값을 지정하여 제거 : remove()

 <형식>
 리스트명.remove(값)

list5 = [1,2,1,2]
list5.remove(2) # 맨처음에 나온 2를 삭제

print("list5.remove(2) 실행 후 -->",list5) #[1, 1, 2]


# 리스트 내부의 요소를 모두 제거 : clear()

 <형식>
 리스트명.clear()

list6=[0,1,2,3,4,5]
list6.clear()

print("list6.clear() 실행 후 -->",list6) # []


# 리스트 정렬 : sort()

 <형식>
 리스트명.sort()    -->오름차순
 리스트명.sort(reverse=True)    -->내림차

list7=[1,4,3,2]
list7.sort()

print("list7.sort() 실행 후 -->",list7) #[1, 2, 3, 4]

list7.sort(reverse=True)
print("list7.sort(reverse=True) 실행 후 -->",list7) # [4, 3, 2, 1]


# 리스트 뒤집기(반전) : reverse()

 <형식>
 리스트명.reverse()
 
list8 =['a','b','c']
list8.reverse()

print("list8.reverse() 실행 후 -->",list8) # ['c', 'b', 'a']


# 리스트 복사 

#깊은 복사
list1=[1,2,3]
list2=list1[:]
list3=list1.copy()

print(list1) #[1, 2, 3]
print(list2) #[1, 2, 3]
print(list3) #[1, 2, 3]

print(id(list1)) #1707230850504 #메모리번호를 보는것
print(id(list2)) #1707230849992 #list1,2,3는 같은 값을 가지지만 다른존재다
print(id(list3)) #1707230849864


# 얕은복사(리스트할당)
list4=list1
print(list4)
print(id(list4)) #1707230850504 #list1의 메모리 번호와 같게됨
print()

list1[0]=10
print(list1) #[10, 2, 3]
print(list2) #[1, 2, 3]
print(list3) #[1, 2, 3]
print(list4) #[10, 2, 3] #list1의 변화에 영향을 받음 # 수정할때 문제가 생김


# 튜플( tuple) - 파이썬의 독특한 자료형

  읽기 전용 리스트 / 수정이 안됨
  <형식>
  튜플명 = (요소1, 요소2,.....)
  튜플명 = 요소1,요소2,....
  튜플명 = (요소1,)
  튜플명 = 요소1, --> 요소가 1개인 튜플을 만들때는 뒤에 콤마를 붙인다.
                      붙이지 않으면 그냥 변수가 됨.


# 튜플 인덱싱

t1=(1,2,'a','b')
print('t1 -->',t1)

print(t1[0]) #1
print(t1[3]) #b

# 튜플 슬라이싱

t1=(1,2,'a','b')

print(t1[1:]) #(2, 'a', 'b')


# 튜플 더하기, 곱하기, 길이구하기

t1=(1,2,'a','b')
t2=(3,4)

print(t1+t2) #(1, 2, 'a', 'b', 3, 4)
print(t2*3) #(3, 4, 3, 4, 3, 4)
print(len(t1)) #4


# 리스트와 튜플의 차이점
 리스트는 [], 튜플은 ()
 리스트는 그 값의 생성, 삭제, 수정 가능
 튜플은 그 값을 바꿀수 없다.


# 튜플을 리스트로 만들고 리스트를 튜플로 만들기

a=[1,2,3]
print("리스트 a -->",a) #[1, 2, 3]

b=(4,5,6)
print("튜플 b -->",b) # (4, 5, 6)

print("tuple(a) 실행 후 -->",tuple(a)) #(1, 2, 3) #원본애들과 다른 깊은복사임
print("list(b) 실행 후 -->",list(b)) # [4, 5, 6] #원본애들과 다른 깊은복사임


# 딕셔너리(dictionary)

 중괄호 {}로 묶여있으며, 키와 값의 쌍으로 이루어짐
 순서가 없는 자료형이라 인덱싱을 지원하지 않는다.

 <형식>
 딕셔너리명 = {키1:값1,키2:값2,키3:값3,...}
 
dic = {'name':'홍길동','phone':'01012345678','birth':'0101'}
print(dic) #{'name': '홍길동', 'phone': '01012345678', 'birth': '0101'}


print(dic['name']) #홍길동

#딕셔너리 쌍 추가 하기
dic['address']='대구'  #앞부분이 키 = 뒤에가 값

print(dic) #{'name': '홍길동', 'phone': '01012345678', 'birth': '0101', 'address': '대구'}

#딕셔너리 쌍 삭제
del dic['address']
print(dic) #{'name': '홍길동', 'phone': '01012345678', 'birth': '0101'}


# 키 리스트 만들기 //키 부분만 모은것
print(dic.keys()) #dict_keys(['name', 'phone', 'birth'])

# 값(value) 리스트 만들기 // 값 부분만 모은것
print(dic.values()) #dict_values(['홍길동', '01012345678', '0101'])

# item을 이용해서 쌍(키,값) 얻기 / 쌍이 튜플형식으로 나타남
print(dic.items()) #dict_items([('name', '홍길동'), ('phone', '01012345678'), ('birth', '0101')])

# 딕셔너리 모두 지우기
print(dic.clear()) #None


================================================
# 리스트와 딕셔너리

'''
[문제] 리스트의 수정, 삭제, 변경

1. 과일이름을 요소로 하는 값이 3개 이상인 리스트 a를 생성하라.

2. 음식이름을 요소로 하는 값이 3개 이상인 리스트 b를 생성하라.

3. 위 두 개의 리스트를 하나로 합친 리스트 c를 생성하라.

4. c에서 마지막 과일을 다른 과일로 대체하라.

5. c에서 마지막 음식을 삭제하라.


[출력결과]

과일 리스트 :  ['사과', '복숭아', '포도']
음식 리스트 :  ['김치', '라면', '피자']
과일과 음식 리스트 :  ['사과', '복숭아', '포도', '김치', '라면', '피자']
과일과 음식 리스트 :  ['사과', '복숭아', '바나나', '김치', '라면', '피자']
과일과 음식 리스트 :  ['사과', '복숭아', '바나나', '김치', '라면']

'''



'''
[문제] 리스트 명령어 연습 문제

1. 학생이 3명[홍길동, 허난설헌, 허균]인 과에 이황이 편입을 했다. “이황”을 리스트에 추가하라.

2. 위 리스트에 동명이인 허균이 새로 편입을 했다고 가정하고 “허균”을 추가하라.

3. “허균”이 몇 명인지 명령어를 써서 구해보아라. (count함수이용)

4. “홍길동”이 다른 과로 전과를 하였다. “홍길동”을 찾아 삭제하라.

5. 현재 리스트에서 두 번째 학생이 자퇴를 하였다. 두 번째 학생을 삭제하라.

6. 현재 출석부를 내림차순으로 정렬하라.


[출력결과]

현재 학생은 ['홍길동', '허난설헌', '허균'] 입니다.
현재 학생은 ['홍길동', '허난설헌', '허균', '이황'] 입니다.
현재 학생은 ['홍길동', '허난설헌', '허균', '이황', '허균'] 입니다.
허균은 2명입니다.
현재 학생은 ['허난설헌', '허균', '이황', '허균'] 입니다.
현재 학생은 ['허난설헌', '이황', '허균'] 입니다.
현재 학생은 ['허난설헌', '허균', '이황'] 입니다.

'''



'''
[문제] 딕셔너리 관련 문제

1. {"강감찬":"귀주대첩", "을지문덕":"살수대첩", "세종대왕":"집현전"}라는 딕셔너리를 만들고 여기에 {"서희":"강동6주"}를 추가하여라.

2. 위의 딕셔너리에서 Key가 "세종대왕"인 것의 Value를 "한글"로 수정하여라.

3. "을지문덕"이라는 Key에 해당하는 쌍(key, value)을 삭제하라.


[출력결과]

현재 딕셔너리는 {'강감찬': '귀주대첩', '을지문덕': '살수대첩', '세종대왕': '집현전'} 입니다.
현재 딕셔너리는 {'강감찬': '귀주대첩', '을지문덕': '살수대첩', '세종대왕': '집현전', '서희': '강동6주'} 입니다.
현재 딕셔너리는 {'강감찬': '귀주대첩', '을지문덕': '살수대첩', '세종대왕': '한글', '서희': '강동6주'} 입니다.
현재 딕셔너리는 {'강감찬': '귀주대첩', '세종대왕': '한글', '서희': '강동6주'} 입니다.

'''































